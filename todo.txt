WARNING!!
This is not intended to be read by anyone other than me so don't try
too hard to understand.


#----------------------------------------------------------------------------
rewrite tests so that they rely less on previous tests
FROM:
(init_args, method_args)
...
complex_object = ComplexClass(*init_args)
complex_object.complex_method(*method_args)
assert(complex_object.attributes, init_args.method(*method_args))
TO:
(init_args, method_args, expected_args)
...
complex_object = ComplexClass(*init_args)
complex_object.complex_method(*method_args)
assert(complex_object, ComplexClass(*expected_args))


#----------------------------------------------------------------------------
test decorators

#----------------------------------------------------------------------------
check if substitute(recursive=True) goes in circles

#----------------------------------------------------------------------------
class DoubleCVN
    CVN upper
    CVN lower

class SSANumbering
    DoubleCVN numbering

    deduce_edges()

or (better i think):
class SSACycleDoubleCVN
    CVN upper
    CVN lower

    deduce_edges()

==> MyCase has no or little purpose

#----------------------------------------------------------------------------
clean up tests for LinearFormula

#----------------------------------------------------------------------------
rewrite main so that info about patterns is available when solving equations

#-DONE-I-THINK---------------------------------------------------------------
or formula.equivalent(formula_2)

#----------------------------------------------------------------------------
pass the order at which to substitute variables in
formula.get_bounds(recursive=True)

#----------------------------------------------------------------------------
Actualize a graph numbering from 2 CVNumberings and use it to test the
numberings
(concrete number of vertices, no unspecified variables)





